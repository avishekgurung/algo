Standard Binary Tree
        |-------1-------|
    |---2---|       |---3---|
    4       5       6       7


1.  Perform preorder, inorder, postorder traversal of a Binary Tree by using recursion and iteration.

2.  Perform a breadth first traversal of a Binary Tree.

3.  Find a maximum element in a binary tree.

4.  Search an element in a Binary Tree.

5.  Find a size of Binary Tree (total no of nodes in a tree).

6.  Delete a binary tree.

7.  Printing the level order data in reverse order. Meaning for a standard tree, the output
    should be 4567231

8.  Find a height of a binary tree.

9.  Find a deepest node of a binary tree.

10. Delete an element from a Binary Tree.

11. Find number of leaves, full nodes, half nodes in a Binary Tree.

12. Given two trees, check if they are 1.identical 2.mirrors. 3.isomorphic 4. quasi-isomorphic

13. Find the diameter(width) of a Binary Tree. To get the more details of the width of a tree,
    check https://www.geeksforgeeks.org/diameter-of-a-binary-tree/

14. Find a level that has maximum sum in a Binary Tree.

15. Print all the root to leaf path of a Binary Tree.

16. Check existence of a path with given sum. Meaning given a sum, there should exits a path
    from root to any leaf such that the sum of their nodes must be equal to the given sum.

17. Find sum of all the elements of a Binary Tree.

18. Convert Binary Tree to its mirror.

19. Construct a tree from inorder and pre-order traversals.
    Eg: Inorder: D B E A F C
        Preorder: A B D E C F

20. Given two travel sequences, can we construct a binary tree.

21. For a given node, print all the ancestors of a node in a Binary Tree.

22. Find a Lowest Common Ancestor of two given nodes in Binary Tree.

23. Traverse a Binary Tree in zig-zag fashion. Our standard Binary Tree should be printed as
    1 3 2 4 5 6 7

24. Find vertical sum of a Binary Tree.

25. How many different Binary Trees are possible with 'n' nodes.

26. Given a tree where leaves are represented by 0 and internal nodes by 1, assuming that each
    node has either 0 or 2 children, create a tree given its pre-order traversal.
    Eg: 10100 should create a tree as follows.
             1
         0      1
               0 0

27. Given a Binary Tree with three pointers: left, right and nextSibling. Point nextSibling pointer
    to its siblings assuming that they are all null in the beginning. For our standard tree, the
    next sibling pointer would be as follows:

    1 -> N
    2 -> 3
    3 -> N
    4 -> 5
    5 -> 6
    6 -> 7
    7 -> N

