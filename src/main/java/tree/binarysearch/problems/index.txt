1. Insert element into BST using recursion and iteration.

2. Search an element in a BST.

3. Find a maximum and minimum element in a BST.

4. Find the inorder predecessor and successor in a BST.

5. Delete an element from a BST.

6. Find shortest path between two nodes in a BST.

7. Find LCA between two nodes in a BST.

8. Check if a given tree is BST or not.

9. Convert BST to Circular DLL with space complexity as O(1).

10. Given a sorted DLL, convert it into BST.

11. Given a sorted array, convert it into BST.

12. Given a sorted Singly Linked List, convert it into BST.

13. Find kth smallest element in a BST.

14. Find the floor and ceiling value for a given node in BST.

15. Find the union and intersection of BSTs.

16. Given two element x and y, print all the elements that lies in the within the range
    of x and y.
    Alt: Given a root of a BST, trim the tree so that all the elements are in the range
    x and y.

17. Check if two given BSTs has same elements (same content and same size).

18. Given a pre-order traversal, create a BST.

19. Give a pre-order traversal, create a post order traversal.
