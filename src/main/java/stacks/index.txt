1.  Check balancing of symbols i.e. for a given mathematical expression, we need to check if
    the expression is valid or not.
    Eg 1.
        (a+b)+(c+d) is valid
        ((a+b)+(c+d) is invalid
        ((a+b)+(c-d)} is invalid

2.  Convert an infix expression to postfix expression.

3.  Evaluate postfix expression.

4.  Evaluate infix expression.

5.  Implement a stack where getMinimum() gives us the minimum element of stack at constant
    time O(1).

6*. Implement a stack where getMinimum() gives us the minimum element of stack at constant
    time O(1) without any extra space.

7. Reverse a stack.

8. Implement queue using two stacks.

9. Implement stack using two queues.

10. Implement N number of stacks in one array.
    Sub: Implement two/three stack in an array.

11.*Finding a Span. Span is basically used for financial analysis. If we are given a stock
    value of an item per day, then span for each day is the number of days before this day
    where the stock value was less than or equal to this day.

    Lets assume that the array index represents the order of days.

    Eg: arr[] =    {6,3,4,5,2}. At 0th day, the value of stock is 6 and so on.
    Now the span = {1,1,2,3,1}
     6 -> No days where stock value was less than or equal to 6 on/before 0th day hence
     its 1
     3 -> No days where stock value was less than or equal to 3 on/before 1st day hence
     its 1
     4 -> On 1st and 2nd day, the value of stock was less than or equal to 4 hence its 2.

    Eg: arr[] = {100, 80, 60, 70, 60, 75, 85};
    Span =      {1,    1, 1,   2,  1,  4,  6}

12. Find the max area in a histogram.

13*.Sort a stack. (Both recursion and iteration)

14. How to implement a stack which will support following operations in O(1) time complexity?
    1) push() which adds an element to the top of stack.
    2) pop() which removes an element from top of stack.
    3) findMiddle() which will return middle element of the stack.
    4) deleteMiddle() which will delete the middle element.
    Push and pop are standard stack operations.

15*. Implement stack using single queue.

16. Implement stack using Heap/Priority Queue.

17. Create a customized data structure such that it has functions :-
    GetLastElement();
    RemoveLastElement();
    AddElement()
    GetMin()

18. Implement Stack and Queue using Deque.

19. Given an array, print the Next Greater Element (NGE) for every element. The Next
    Greater Element for an element x is the first greater element on the right side of x
    in array. Elements for which no greater element exist, consider next greater element
    as -1.

    Eg: arr = {4, 5, 2, 25}
        4 -> 5
        5 -> 25
        2 -> 25
        25 -> -1

20. Next Greater Frequency Element.
    Given an array, for each element find the value of nearest element to the right which
    is having frequency greater than as that of current element. If there does not exist
    an answer for a position, then make the value ‘-1’.

    Input : a[] = [ 1,  1, 2, 3, 4, 2,  1]
    Output :      [-1, -1, 1, 2, 2, 1, -1]
    Explanation:
    Given array a[] =            [1, 1, 2, 3, 4, 2, 1]
    Frequency of each element is: 3, 3, 2, 1, 1, 2, 3
    Lets calls Next Greater Frequency element as NGF
    1. For element a[0] = 1 which has a frequency = 3,
       As it has frequency of 3 and no other next element
       has frequency more than 3 so  '-1'
    2. For element a[1] = 1 it will be -1 same logic
       like a[0]
    3. For element a[2] = 2 which has frequency = 2,
       NGF element is 1 at position = 6  with frequency
       of 3 > 2
    4. For element a[3] = 3 which has frequency = 1,
       NGF element is 2 at position = 5 with frequency
       of 2 > 1
    5. For element a[4] = 4 which has frequency = 1,
       NGF element is 2 at position = 5 with frequency
       of 2 > 1
    6. For element a[5] = 2 which has frequency = 2,
       NGF element is 1 at position = 6 with frequency
       of 3 > 2
    7. For element a[6] = 1 there is no element to its
       right, hence -1

    Input : a[] = [1, 1, 1, 2, 2, 2, 2, 11, 3, 3]
    Output : [2, 2, 2, -1, -1, -1, -1, 3, -1, -1]

21. Number of NGEs to the right.
    Input : arr[] = {3, 4, 2, 7, 5, 8, 10, 6}
    Given index = 0.

    For index = 0, element = 3. We need to find how many elements are greater than 3 to
    its right but these elements should be in an increasing order, eg: the elements
    greater than 3 to its right are 4,7,5,8,10 and 6. But the elements which are in
    increasing order are 4,7,8 and 10. So we consider only these elements hence the
    output will be 4.

    For index = 5, output = 1.

22. Celebrity problem. In a party there are N number of people. Among them one is a
    celebrity. The condition being:
        a. Every body knows a celebrity
        b. Celebrity does not know anybody.
    How would you identify the celebrity by calling the below function minimum number of
    times. We can assume that there is function called 'knows(A,B)' which would return
    true if A knows B else false.

    NOTE: A celebrity might not be present as well.

23. Convert postfix to infix.

24. Convert infix to prefix.

