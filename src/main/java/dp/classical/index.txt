1. Fibonacci series.

2.  Longest Common Sub-Sequence.
    A subsequence is a sequence that appears in the same relative order, but not necessarily
    contiguous. For example, “abc”, “abg”, “bdf”, “aeg”, ”acefg”, .. etc are subsequences of
    “abcdefg”. So a string of length n has 2^n different possible subsequences.

    LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
    LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.
    LCS for input Sequences “STONEY” and “LONGEST” is “ONE” of length 3.

3. Longest Increasing Sub-sequence.
    The Longest Increasing Subsequence (LIS) problem is to find the length of the longest
    subsequence of a given sequence such that all elements of the subsequence are sorted in
    increasing order. For example, the length of LIS for {10, 22, 9, 33, 21, 50, 41, 60, 80} is 6
    and LIS is {10, 22, 33, 50, 60, 80}.

4.  Edit Distance.
    Given two strings str1 and str2 and below operations that can performed on str1.
    Find minimum number of edits (operations) required to convert ‘str1’ into ‘str2’.

        Insert
        Remove
        Replace
    All of the above operations are of equal cost.
    Input:   str1 = "geek", str2 = "gesek"
    Output:  1
    We can convert str1 into str2 by inserting a 's'.

    Input:   str1 = "cat", str2 = "cut"
    Output:  1
    We can convert str1 into str2 by replacing 'a' with 'u'.

    Input:   str1 = "sunday", str2 = "saturday"
    Output:  3
    Last three and first characters are same.  We basically
    need to convert "un" to "atur".  This can be done using
    below three operations.
    Replace 'n' with 'r', insert t, insert a

6.  Longest Path in a Matrix
    Given a n*n matrix where all numbers are distinct, find the maximum length path
    (starting from any cell) such that all cells along the path are in increasing order with a
    difference of 1.

    We can move in 4 directions from a given cell (i, j), i.e., we can move to (i+1, j) or
    (i, j+1) or (i-1, j) or (i, j-1) with the condition that the adjacent cells have a difference
    of 1.

    Input:  mat[][] = {{1, 2, 9}
                       {5, 3, 8}
                       {4, 6, 7}}
    Output: 4
    The longest path is 6-7-8-9.

7.  Subset Sum Problem.
    Given a set of non-negative integers, and a value sum, determine if there is a subset of the
    given set with sum equal to given sum.
    Example:

    Input:  set[] = {3, 34, 4, 12, 5, 2}, sum = 9
    Output:  True  //There is a subset (4, 5) with sum 9.
    if sum = 18, output is true where subset is 2,12,4

8.  Optimal Strategy for a Game.
    Consider a row of n coins of values v1 . . . vn, where n is even. We play a
    game against an opponent by alternating turns. In each turn, a player selects either the first
    or last coin from the row, removes it from the row permanently, and receives the value of the
    coin. Determine the maximum possible amount of money we can definitely win if we move first.

    Note: The opponent is as clever as the user.


9.  Knapsack Problem


10. Rod Cutting.
    Given a rod of length n and a table which shows the price of rod based on
    its length. How can we cut the rod so that we get the maximum return.
    Eg, price char = 1(5), 2(5), 3(8), 4(9), 5(10), 6(17), 7(17), 8(20), 9(24), 10(30)
    Rod of length 1 costs 5.
    Rod of length 2 costs 5.
    Rod of length 3 costs 8. and so on.

    If a rod of length 4 is given then the max revenue would be obtained by cutting the rod in two
    halves of size 2 where the revenue would be 2(5) + 2(5) = 10.

    If a rod of length 3 is given the max revenue would be obtained by not cutting the rod.

11. Ways to cover a distance.
    Given a distance ‘dist, count total number of ways to cover the distance with 1, 2 and 3 steps.
    Input:  n = 3
    Output: 4
    Below are the four ways
     1 step + 1 step + 1 step
     1 step + 2 step
     2 step + 1 step
     3 step

    Input:  n = 4
    Output: 7

12. Coin Change
    A set of denomination of coins are given and a value N is provided.

    1.  Find the total number of ways in which we can make a change.
        For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}
        So output should be 4.

    2.  Find the minimum number of coins needed to make a value N.
        Example, N = 10 and coins = [2, 3, 5], then minumum no of coins needed is [5,5] hence the answer is 2.

    Given a value N, if we want to make change for N cents, and we have infinite supply of each of
    S = { S1, S2, .. , Sm} valued coins, how many ways can we make the change? The order of coins
    does not matter.

    For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}
    So output should be 4. For N = 10 and S = {2, 5, 3, 6}, there are five solutions: {2,2,2,2,2},
    {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. So the output should be 5.

13. Given an input string and a dictionary of words, find out if the input string can be segmented
    into a space-separated sequence of dictionary words. See following examples for more details.

    Consider the following dictionary
    { i, like, sam, sung, samsung, mobile, ice,
      cream, icecream, man, go, mango}

    Input:  ilike
    Output: Yes
    The string can be segmented as "i like".

    Input:  ilikesamsung
    Output: Yes
    The string can be segmented as "i like samsung"
    or "i like sam sung".


14. Given a rope of length n meters, cut the rope in different parts of integer lengths in a way
    that maximizes product of lengths of all parts. You must make at least one cut. Assume that
    the length of rope is more than 2 meters.

    Input: n = 2
    Output: 1 (Maximum obtainable product is 1*1)

    Input: n = 3
    Output: 2 (Maximum obtainable product is 1*2)

    Input: n = 4
    Output: 4 (Maximum obtainable product is 2*2)

    Input: n = 5
    Output: 6 (Maximum obtainable product is 2*3)

    Input: n = 10
    Output: 36 (Maximum obtainable product is 3*3*4)


15. Given n dice each with m faces, numbered from 1 to m, find the number of ways to get sum X. X
    is the summation of values on each face when all the dice are thrown.

16. Minimum difference between two subsets.
    Given a set of integers, the task is to divide it into two sets S1 and S2 such that the absolute
    difference between their sums is minimum.
    If there is a set S with n elements, then if we assume Subset1 has m elements, Subset2 must have
    n-m elements and the value of abs(sum(Subset1) – sum(Subset2)) should be minimum.

    Input:  arr[] = {1, 6, 11, 5}
    Output: 1
    Explanation:
    Subset1 = {1, 5, 6}, sum of Subset1 = 12
    Subset2 = {11}, sum of Subset2 = 11
