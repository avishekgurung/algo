1.  There is large array which contains a list of votes received by the leaders. We need to find out
    the winner. Eg, arr[] = {4,1,1,2,4,5,3,2,3,4,5,1,2,1,2,3,4,5,4,4,3,3,2,2,1,3,1,3,5,4,2,3}. There
    are five leaders 1,2,3,4 and 5. Find the efficient solution.

2.  Find the first repeating element in an array. Eg, arr[] = {3,2,1,2,2,3}. The first repeating
    element is 3 and not 2.

3.  Given an array, find a pair of elements whose sum is k.

4.  Given an array of positive and negative integers, find the pair which is closest to 0.

5.  Miscellaneous questions:
    a. Merge two sorted arrays of size n and n+m (where only m elements are filled) into second arr.
    b. Sort an array which contains values from 1 to n.

6.  Given an array contain numbers of 0's and 1's such that 1's occur before 0. Find the index of
    1st 0 element. The number are in millions.

7.  Given an array of elements, find if any duplicate element occurs. How can we optimize if all the
    elements are in the range 0 to n-1.

8.  Given a sorted array of n integers which has been rotated unknown number of times. Find logn
    algo to find an element in the array.
    Eg, arr[] = {15,16,19,20,25,1,3,4,5,7,10,14}. Search 5, output = 8 (which is an index of 5)

9.  Given a sorted array with duplicates, find the index of first occurrence of a number in O(logn).
    arr[] = {1,1,2,2,2,3,3}, if a number is 2 then return 3 (index of first occ of 2). We can
    practice for last occurrence as well.

-10. We have an array of size n where one element occurs more than n/2. We need to find that element.
    We can assume that all the element occurs only once. In the below example, 2 is the req element.
    [2,1,2,2], [2,1,2,3,2],[1,2,2,3,2] etc.

11. Find the subarray with largest sum. (Kadane's algo).
    Eg arr[] = {1,-3,2,1,-1}, max = 3. Also find the starting and ending of subarray.

12. Given a 2D array of 0s and 1s where each in row 1s are followed by 0s. Find the row with maximum
    0. Do the vice versa as well, find the row with max no of 1s.
    Eg, {1,1,0,0,0},
        {1,1,1,1,0},
        {1,0,0,0,0},
        {1,1,1,0,0}
    row with max 0 is 2 with max zero as 4.

13. Find the subarray with sum equal to S. All the elements in an array are positive.
    Eg, arr = [1, 2, 3, 4, 4] and S = 7, Ans is [3,4]

14. Find all the subarrays with sum equal to 0.
    Eg. [2,-1,-1,2]. There are two subarrays from 0 to 2 and 1 to 3.

15. Given an array of size (n-1) where the integers are in the range 1 to n. There are no duplicates
    in the list. One of the integer is missing, find the missing integer.

16. Rotate an array by k elements without using any extra space. Eg, input=[1, 2, 3, 4, 5, 6, 7]
    k = 2, output = [3, 4, 5, 6, 7, 1, 2]

17. Find a pair whose sum equals to K in a rotated array.
    Input: arr[] = {11, 15, 6, 8, 9, 10}, x = 16
    Output: true
    There is a pair (6, 10) with sum 16

    Input: arr[] = {11, 15, 26, 38, 9, 10}, x = 35
    Output: true
    There is a pair (26, 9) with sum 35

    Input: arr[] = {11, 15, 26, 38, 9, 10}, x = 45
    Output: false
    There is no pair with sum 45.

18. Given an array, only rotation operation is allowed on array. We can rotate the array as many
    times as we want. Return the maximum possible of summation of i*arr[i].
    Input: arr[] = {1, 20, 2, 10}
    Output: 72
    We get 72 by rotating array twice.
    {2, 10, 1, 20}
    20*3 + 1*2 + 10*1 + 2*0 = 72

    Input: arr[] = {10, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    Output: 330
    We can 330 by rotating array 9 times.
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    0*1 + 1*2 + 2*3 ... 9*10 = 330
    https://www.geeksforgeeks.org/find-maximum-value-of-sum-iarri-with-only-rotations-on-given
    -array-allowed/

19. Given an array of 0s,1s and 2s, sort them. Dutch Flag Problem.

20. Given an array where all the numbers occurs even number of times except the one number which
    occurs odd number of times. Find the number.

21. Given an array of size n where the elements range from 0 to n-1. Find the element that occurs
    maximum number of times.

22. Given a sorted array with duplicates, find the number of occurrences of a given number at
    minimum time complexity.

23. Given an array of 2n + 1 elements where all elements appear twice except one element which lies
    deep inside. Find this single occurring element.

24. Given an nxn array where the elements are in ascending order in each row as well as in column.
    Search an element.
    {2,5,8,20},
    {6,7,10,25},
    {9,11,15,30},
    {13,14,16,31}

25. Consider an array of distinct numbers sorted in increasing order. The array has been rotated
    (clockwise) k number of times. Given such an array, find the value of k.
    Eg, [4, 1, 2, 3] is rotated 1.
        [1, 2, 3, 4] is rotated 0.

26. Given a value k, rotate the array (sorted) to its left (anti-clockwise rotation).
    arr[] = {1,2,3,4,5}, k=2, output = {3,4,5,1,2}

27. Find the minimum element in a sorted and rotated array.

28. Print left rotation of an array in O(n) without rotating the array.

29. Rotate two dimensional matrix by 90 degree to its right(or left).

30. Given an array of size n+2 where the elements are in the range 1 to n so two elements are
    occurring twice. Find these two elements.

31. Given an array of with 0s and 1s. Put all 0s in the beginning and 1s at the end.

32. Given an array of elements of length N, ranging from 0 to N – 1. All elements may not be present
    in the array. If element is not present then there will be -1 present in the array. Rearrange
    the array such that A[i] = i and if i is not present, display -1 at that place.
    https://www.geeksforgeeks.org/rearrange-array-arri/
    Input : arr = {-1, -1, 6, 1, 9, 3, 2, -1, 4, -1}
    Output : [-1, 1, 2, 3, 4, -1, 6, -1, -1, 9]

33. Given an array of n elements. Our task is to write a program to rearrange the array such that
    elements at odd positions are greater than all elements before it and elements at even positions
    are less than all elements before it.
    Input : arr[] = {3,1,5,6,2,7,4}
    Output : 4 5 3 6 2 7 1

    Input : arr[] = {1, 2, 1, 4, 5, 6, 8, 8}
    Output : 4 5 2 6 1 8 1 8

34. An array of size n contains element from range 1 to n and all the elements are repeating thrice
    except one element. Find that element.

35. How many trailing zeros are there in a factorial of a given number.

36. An array contains both positive and negative numbers in random order. Rearrange the array
    elements so that positive and negative numbers are placed alternatively. Number of positive
    and negative numbers need not be equal. If there are more positive numbers they appear at the
    end of the array. If there are more negative numbers, they too appear in the end of the array.

    For example, if the input array is [-1, 2, -3, 4, 5, 6, -7, 8, 9], then the output should be
    [9, -7, 8, -3, 5, -1, 2, 4, 6]

37. Given an array of n positive integers and a number k. Find the minimum number of swaps required
    to bring all the numbers less than or equal to k together.
    Input:  arr[] = {2, 1, 5, 6, 3}, k = 3
    If we replace 3 with 5 then all the numbers [2,1,3] will be together. Hence only 1 swap.
    Output: 1

    Input:  arr[] = {5,6,3,7,1,2,9,10}, k = 3
    Output: 1

38. Rearrange array such that:
    A[i] >= A[i-1]  , if i is even.
    A[i] <= A[i-1]  , if i is odd.

39. Given an array of integers of size n. Assume ‘0’ as invalid number and all other as valid
    number. Convert the array in such a way that if next valid number is same as current number,
    double its value and replace the next number with 0. After the modification, rearrange the
    array such that all 0’s are shifted to the end.

    Input : arr[] = {2, 2, 0, 4, 0, 8}
    Output : 4 4 8 0 0 0

    Input : arr[] = {0, 2, 2, 2, 0, 6, 6, 0, 0, 8}
    Output :  4 2 12 8 0 0 0 0 0 0
    (Asked in Microsoft)

40. We have a building of with n floors and we have many eggs with us. When an egg is thrown from a
    floor higher than F then egg breaks else it will not. Devise a strategy to identify the F floor
    by throwing minimum number of eggs.

41.*Given an array of elements find the max difference between two elements such that the larger
    element appears after the smaller element.
    Eg, arr[]={2,3,10,6,4,8,1}. Max diff is 8 (between 2 and 10).
    arr[] = {7,9,5,6,3,2}. Max diff is 2 (between 9 and 7)

42. Given two integer arrays of same size, “arr[]” and “index[]”, reorder elements in “arr[]”
    according to given index array. It is not allowed to given array arr’s length.

    Input:  arr[]   = [10, 11, 12];
            index[] = [1, 0, 2];
    Output: arr[]   = [11, 10, 12]
            index[] = [0,  1,  2]

    Input:  arr[]   = [50, 40, 70, 60, 90]
            index[] = [3,  0,  4,  1,  2]
    Output: arr[]   = [40, 60, 90, 50, 70]
            index[] = [0,  1,  2,  3,   4]


43. Given an array of numbers, arrange them in a way that yields the largest value. For example,
    if the given numbers are {54, 546, 548, 60}, the arrangement 6054854654 gives the largest value.
    And if the given numbers are {1, 34, 3, 98, 9, 76, 45, 4}, then the arrangement 998764543431
    gives the largest value.

44. Given an array of size n where all elements are distinct and in range from 0 to n-1, change
    contents of arr[] so that arr[i] = j is changed to arr[j] = i.

    Input: arr[]  = {1, 3, 0, 2};
    Output: arr[] = {2, 0, 3, 1};
    Explanation for the above output.
    Since arr[0] is 1, arr[1] is changed to 0
    Since arr[1] is 3, arr[3] is changed to 1
    Since arr[2] is 0, arr[0] is changed to 2
    Since arr[3] is 2, arr[2] is changed to 3

    Input: arr[]  = {2, 0, 1, 4, 5, 3};
    Output: arr[] = {1, 2, 0, 5, 3, 4};

45. You have been given an array and you have to make a program to convert that array such that
    positive elements occur at even numbered places in the array and negative elements occur at
    odd numbered places in the array. We have to do it in place.
    There can be unequal number of positive and negative values and the extra values have to be left
    as it is.

    Input : arr[] = {1, -3, 5, 6, -3, 6, 7, -4, 9, 10}
    Output : arr[] = {1, -3, 5, -3, 6, 6, 7, -4, 9, 10}

    Input : arr[] = {-1, 3, -5, 6, 3, 6, -7, -4, -9, 10}
    Output : arr[] = {3, -1, 6, -5, 3, -7, 6, -4, 10, -9}

46. Given an array of integers, update every element with multiplication of previous and next
    elements with following exceptions.
    a) First element is replaced by multiplication of first and second.
    b) Last element is replaced by multiplication of last and second last.

    Input: arr[] = {2, 3, 4, 5, 6}
    Output: arr[] = {6, 8, 15, 24, 30}

    // We get the above output using following
    // arr[] = {2*3, 2*4, 3*5, 4*6, 5*6}

47. Shuffle an array. (My generic :))

48. Given an array with all distinct elements, find the largest three elements. Expected time
    complexity is O(n) and extra space is O(1).

49. Given two equally sized arrays (A, B) and N (size of both arrays).
    A sum combination is made by adding one element from array A and another element of array B.
    Display the maximum K valid sum combinations from all the possible sum combinations.

    Input :  A[] : {3, 2}
             B[] : {1, 4}
             K : 2 [Number of maximum sum
                   combinations to be printed]
    Output : 7    // (A : 3) + (B : 4)
             6    // (A : 2) + (B : 4)

    Input :  A[] : {4, 2, 5, 1}
             B[] : {8, 0, 3, 5}
             K : 3
    Output : 13   // (A : 5) + (B : 8)
             12   // (A : 4) + (B :  8)
             10   // (A : 2) + (B : 8)

50. Given an an array, segregate odd and even numbers such that even numbers are at the beginning
    and odd number towards the end.

51. Given an Array of Integers and an Integer value k, find out k sub-arrays(may be overlapping)
    which have k maximum sums.
    Input : arr = {4, -8, 9, -4, 1, -8, -1, 6}, k = 4
    Output : 9 6 6 5
    https://www.geeksforgeeks.org/k-maximum-sum-overlapping-contiguous-sub-arrays/

52. Given a sorted array of n distinct integers where each integer is in the range from 0 to m-1
    and m > n. Find the smallest number that is missing from the array.

    Examples
    Input: {0, 1, 2, 6, 9}, n = 5, m = 10
    Output: 3

    Input: {4, 5, 10, 11}, n = 4, m = 12
    Output: 0

    Input: {0, 1, 2, 3}, n = 4, m = 5
    Output: 4

    Input: {0, 1, 2, 3, 4, 5, 6, 7, 10}, n = 9, m = 11
    Output: 8

53. Given an array of positive numbers, find the maximum sum of a subsequence with the constraint
    that no 2 numbers in the sequence should be adjacent in the array.
    Input : arr[] = {5, 5, 10, 100, 10, 5}
    Output : 110

    Input : arr[] = {1, 2, 3}
    Output : 4

    Input : arr[] = {1, 20, 3}
    Output : 20

54. Given heights of n towers and a value k. We need to either increase or decrease height of every
    tower by k (only once) where k > 0. The task is to minimize the difference between the heights
    of the longest and the shortest tower after modifications, and output this difference.

    Input  : arr[] = {1, 15, 10}, k = 6
    Output :  Maximum difference is 5.
    Explanation : We change 1 to 6, 15 to
    9 and 10 to 4. Maximum difference is 5
    (between 4 and 9). We can't get a lower
    difference.

    Input : arr[] = {4, 6} k = 10
    Output : Maximum difference is 2
    arr[] = {14, 16} OR {-6, -4}

55. Given an array of integers and a number x, find the smallest subarray with sum greater than the
    given value.

    arr[] = {1, 4, 45, 6, 0, 19}
       x  =  51
    Output: 3
    Minimum length subarray is {4, 45, 6}

    arr[] = {1, 10, 5, 2, 7}
       x  = 9
    Output: 1
    Minimum length subarray is {10}

    arr[] = {1, 11, 100, 1, 0, 200, 3, 2, 1, 250}
        x = 280
    Output: 4
    Minimum length subarray is {100, 1, 0, 200}

    arr[] = {1, 2, 4}
        x = 8
    Output : Not Possible
    Whole array sum is smaller than 8.


56. Minimum steps required to get a desired array.
    Consider an array with n elements and value of all the elements is zero. We can perform
    following operations on the array.

    Incremental operations:Choose 1 element from the array and increment its value by 1.
    Doubling operation: Double the values of all the elements of array.

    We are given desired array target[] containing n elements. Compute and return the smallest
    possible number of the operations needed to change the array from all zeros to desired array.

    Input: target[] = {2, 3}
    Output: 4
    To get the target array from {0, 0}, we
    first increment both elements by 1 (2
    operations), then double the array (1
    operation). Finally increment second
    element (1 more operation)

    Input: target[] = {2, 1}
    Output: 3
    One of the optimal solution is to apply the
    incremental operation 2 times to first and
    once on second element.

    Input: target[] = {16, 16, 16}
    Output: 7
    The output solution looks as follows. First
    apply an incremental operation to each element.
    Then apply the doubling operation four times.
    Total number of operations is 3+4 = 7
    https://www.geeksforgeeks.org/count-minimum-steps-get-given-desired-array/

57. You are given an array of n-elements, you have to find the number of subsets whose product
    of elements is less than or equal to a given integer k.

58. Given a sorted array (sorted in non-decreasing order) of positive numbers, find the smallest
    positive integer value that cannot be represented as sum of elements of any subset of given
    set.
    Input:  arr[] = {1, 3, 6, 10, 11, 15};
    Output: 2

    Input:  arr[] = {1, 1, 1, 1};
    Output: 5

    Input:  arr[] = {1, 1, 3, 4};
    Output: 10

    Input:  arr[] = {1, 2, 5, 10, 20, 40};
    Output: 4

    Input:  arr[] = {1, 2, 3, 4, 5, 6};
    Output: 22

59. Given an array of positive integers. We need to make the given array a ‘Palindrome’. Only
    allowed operation on array is merge. Merging two adjacent elements means replacing them with
    their sum. The task is to find minimum number of merge operations required to make given array
    a ‘Palindrome’.

    To make an array a palindromic we can simply apply merging operations n-1 times where n is the
    size of array (Note a single element array is always palindrome similar to single character in
    string). In that case, size of array will be reduced to 1. But in this problem we are asked to
    do it in minimum number of operations.

    Input : arr[] = {15, 4, 15}
    Output : 0
    Array is already a palindrome. So we
    do not need any merge operation.

    Input : arr[] = {1, 4, 5, 1}
    Output : 1
    We can make given array palindrome with
    minimum one merging (merging 4 and 5 to
    make 9)

    Input : arr[] = {11, 14, 15, 99}
    Output : 3
    We need to merge all elements to make
    a palindrome.

    Input : arr[] = {3, 5, 1, 1, 1}
    Output: 2

60. Longest Span with same Sum in two Binary arrays. Given two binary arrays, we need to find the
    longest subarray such that this subarray is common to both and has the maximum sum.

    In other words, given two binary arrays arr1[] and arr2[] of same size n. Find length of the
    longest common span (i, j) where j >= i such that arr1[i] + arr1[i+1] + …. + arr1[j] = arr2[i]
    + arr2[i+1] + …. + arr2[j].

    Input: arr1[] = {0, 1, 0, 0, 0, 0};
           arr2[] = {1, 0, 1, 0, 0, 1};
    Output: 4
    The longest span with same sum is from index 1 to 4.

    Input: arr1[] = {0, 1, 0, 1, 1, 1, 1};
           arr2[] = {1, 1, 1, 1, 1, 0, 1};
    Output: 6
    The longest span with same sum is from index 1 to 6.

    Input: arr1[] = {0, 0, 0};
           arr2[] = {1, 1, 1};
    Output: 0

    Input: arr1[] = {0, 0, 1, 0};
           arr2[] = {1, 1, 1, 1};
    Output: 1

61. Find the largest subarray in a binary array with equal number of 0s and 1s.

62. You are given an array of n-elements you have to find k smallest elements from the array but
    they must be in the same order as they are in given array and we are allowed to use only O(1)
    extra space.
     Eg. arr[] = {5,7,4,2,6,1,9} and k = 3
     output = 4,2,1

63. Shuffle 2n integers in format {a1, b1, a2, b2, a3, b3, ……, an, bn} without using extra space.

64. Find the k maximum sum of a contiguous array.
    a. The sub-array could be overlapping.
        Eg. arr = {4, -8, 9, -4, 1, -8, -1, 6}, k = 4
            output: 9 6 6 5

    b. The sub-array should not overlap
        Eg. arr = {4, 1, 1, -1, -3, -5, 6, 2, -6, -2}, k = 3
            output: 8, 6, -1

65. Given an array of n distinct elements and a number x, arrange array elements according to the
    absolute difference with x, i. e., element having minimum difference comes first and so on.
    Note : If two or more elements are at equal distance arrange them in same sequence as in the
    given array.

    Input : arr[] : x = 7, arr[] = {10, 5, 3, 9, 2}
    Output : arr[] = {5, 9, 10, 3, 2}
    Explanation:
    7 - 10 = 3(abs)
    7 - 5 = 2
    7 - 3 = 4
    7 - 9 = 2(abs)
    7 - 2 = 5
    So according to the difference with X,
    elements are arranged as 5, 9, 10, 3, 2.

66. Sort the array in wave form. Given an unsorted array of integers, sort the array into a wave
    like array. An array ‘arr[0..n-1]’ is sorted in wave form if arr[0] >= arr[1] <= arr[2] >=
    arr[3] <= arr[4] >= ….

     Input:  arr[] = {10, 5, 6, 3, 2, 20, 100, 80}
     Output: arr[] = {10, 5, 6, 2, 20, 3, 100, 80} OR
                     {20, 5, 10, 2, 80, 6, 100, 3} OR
                     any other array that is in wave form

     Input:  arr[] = {20, 10, 8, 6, 4, 2}
     Output: arr[] = {20, 8, 10, 4, 6, 2} OR
                     {10, 8, 20, 2, 6, 4} OR
                     any other array that is in wave form

67. Given an array A of size N consisting of elements 1 to N. A boolean array B consisting of N-1
    elements indicates that if B[i] is 1, then A[i] can be swapped with A[i+1].
    Find out if A can be sorted by swapping elements.

    Input : A[] = {1, 2, 5, 3, 4, 6}
            B[] = {0, 1, 1, 1, 0}
    Output : A can be sorted
    We can swap a[3] with a[4] and then a[4] with a[5].

    Input : A[] = {2, 3, 1, 4, 5, 6}
            B[] = {0, 1, 1, 1, 1}
    Output : A can not be sorted
    We can not sort A by swapping elements


68. Print the elements of an array in the decreasing frequency if 2 numbers have same frequency
    then print the one which came first.

    Input:  arr[] = {2, 5, 2, 8, 5, 6, 8, 8}
    Output: arr[] = {8, 8, 8, 2, 2, 5, 5, 6}

    Input: arr[] = {2, 5, 2, 6, -1, 9999999, 5, 8, 8, 8}
    Output: arr[] = {8, 8, 8, 2, 2, 5, 5, 6, -1, 9999999}

69. Given an array of n distinct elements, find the minimum number of swaps required to sort the
    array.

    Input : {4, 3, 2, 1}
    Output : 2
    Explanation : Swap index 0 with 3 and 1 with 2 to form the sorted array {1, 2, 3, 4}.

    Input : {1, 5, 4, 3, 2}
    Output : 2

70. Union and Intersection of two arrays without using any extra space.
    Input : arr1[] = {1, 3, 4, 5, 7}
            arr2[] = {2, 3, 5, 6}
    Output : Union : {1, 2, 3, 4, 5, 6, 7}
             Intersection : {3, 5}

    Input : arr1[] = {2, 5, 6}
            arr2[] = {4, 6, 8, 10}
    Output : Union : {2, 4, 5, 6, 8, 10}
             Intersection : {6}

71. Given an array find the minumum subarray which when sorted makes the whole array sorted.
    1) If the input array is [10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60], your program should
     be able to find that the subarray lies between the indexes 3 and 8.

    2) If the input array is [0, 1, 15, 25, 6, 7, 30, 40, 50], your program should be able to
     find that the subarray lies between the indexes 2 and 5.

72. Find total number of triangles.
    https://www.geeksforgeeks.org/find-number-of-triangles-possible/

73. We are given two sorted array. We need to merge these two arrays such that the initial
    numbers (after complete sorting) are in the first array and the remaining numbers are in
    the second array. Extra space allowed in O(1).
    (Asked in several big companies)

    Input: ar1[] = {10};
           ar2[] = {2, 3};
    Output: ar1[] = {2}
            ar2[] = {3, 10}

    Input: ar1[] = {1, 5, 9, 10, 15, 20};
           ar2[] = {2, 3, 8, 13};
    Output: ar1[] = {1, 2, 3, 5, 8, 9}
            ar2[] = {10, 13, 15, 20}

74. Given a pair-sum array and size of the original array (n), construct the original array.
    A pair-sum array for an array is the array that contains sum of all pairs in ordered form.
    For example pair-sum array for arr[] = {6, 8, 3, 4} is {14, 9, 10, 11, 12, 7}

75. Given an array where difference between adjacent elements is 1, write an algorithm to
    search for an element in the array and return the position of the element (return the
    first occurrence).

    Input: arr[] = {8, 7, 6, 7, 6, 5, 4, 3, 2, 3, 4, 3}
           x = 3
    Output: Element 3 found at index 7

    We can enhance this question where every element differs by k and search an element x.

    Input : arr[] = {20, 40, 50, 70, 70, 60}
              k = 20
              x = 60
    Output : 5
    The index of 60 is 5


76. Search an element in an infinite sorted array. (Amazon)

77. Given an array of A of n integers and an array B of m integers find the Maximum Contiguous
    Subarray Sum of array A such that any element of array B is not present in that subarray.

    Input : A = {1, 7, -10, 6, 2}, B = {5, 6, 7, 1}
    Output : 2
    Explanation Since the Maximum Sum Subarray of A is not allowed to have any element that is
    present in array B.
    The Maximum Sum Subarray satisfying this is {2} as the only allowed subarrays are:{-10} and {2}.
    The Maximum Sum Subarray being {2} which sums to 2

    Input : A = {3, 4, 5, -4, 6}, B = {1, 8, 5}
    Output : 7

    Explanation
    The Maximum Sum Subarray satisfying this is {3, 4} as the only allowed subarrays are
    {3}, {4}, {3, 4}, {-4}, {6}, {-4, 6}. The Maximum Sum subarray being {3, 4} which sums to 7

78. Given an array arr[]. Find maximum value of prefix sum which is also suffix sum for index i
    in arr[].

    Input : arr[] = {-1, 2, 3, 0, 3, 2, -1}
    Output : 4
    Prefix sum of arr[0..3] =
                Suffix sum of arr[3..6]

    Input : arr[] = {-2, 5, 3, 1, 2, 6, -4, 2}
    Output : 7
    Prefix sum of arr[0..3] =
                  Suffix sum of arr[3..7]


79. Find the majority element and if not present display a message. In an array of size n, the
    majority element is the one whose occurrences is more than n/2.
