1.  If there is a problem where the array is of size n and the elements in the array are in the range
    0 to n-1, then these kind of problems are usually solved by using the arr element as an index.
    Also, if there are no duplicates then the sum of all the elements is k(k+1)/2 where k=arrSize.
    Eg. Problem007

2.  Bitwise XOR operator. Learn more about it than just a truth table. Following are the
    characteristics of Bitwise XOR:
    a.  XORing of all the elements in a boolean array would tell you if the array has odd number of
        true elements
    b.  If you have an array with all numbers repeating even number of times except one which repeats
        odd number of times you can find that by XORing all elements.
    c.  Swapping values without using temporary variable
    d.  Finding missing number in the range 1 to n
    e.  Basic validation of data sent over the network.

    Most of the problems which involves odd and even occurrences can be approached by Bitwise XOR.

3.  If there are sorted array, then try using binary search as much cos its complexity is really
    less. Most of the problems on sorted array or rotated can be solved in O(logn).

4.  Problems that requires us to maintain orders, eg sort the elements based on their freq but if
    two or more elements have same freq then they should be ordered based on their occurrence,
    such can be solved easily by creating a Node(class) that takes different parameters like
    element, freq (or any attribute) and index. We sort elements by the attribute but also on
    their index if the attribute are same.

5.  When there are Binary Arrays and the problem involves finding subarray. We might have to change
    this problem so that we have elements like 0,1 and -1. And then the problem might boil down to
    find subarrays with sum equal to 0.

6.  Array rearrangement can normally be solved by following approaches:
        1. Segregating odd/negative as last and even/pos at first.
            Here, first find the index of first neg/odd element. Take pointer one step ahead and
            start the re-arrangement.

        2.  Some problems also involves, if the current element is at wrong position then finding
            the next element which is at wrong position and swapping them. This will keep the
            position of other elements intact.

        3.  Wave form: We check if an element at arr[i] is as follows:
            arr[i] < arr[i-1]
                Yes: Do nothing
                No: swap(arr[i], arr[i-1])

            arr[i] < arr[i+1]
                Yes: Do nothing
                No: swap(arr[i], arr[i+1])
